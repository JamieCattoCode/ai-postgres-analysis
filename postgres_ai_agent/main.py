from postgres_ai_agent.modules.db import PostgresDB
from postgres_ai_agent.modules import llm
import os
import dotenv
from autogen import (
    AssistantAgent,
    UserProxyAgent,
    GroupChat,
    GroupChatManager,
    config_list_from_json,
    config_list_from_models,
)

dotenv.load_dotenv()

assert os.environ.get('DATABASE_URL'), "POSTGRES_CONNECTION_URL not found in .env file."
assert os.environ.get('OPEN_AI_API_KEY'), "OPEN_AI_API_KEY not found in .env file."

DB_URL = os.environ.get('DATABASE_URL')
OPEN_AI_API_KEY = os.environ.get('OPEN_AI_API_KEY')

POSTGRES_TABLE_DEFINITIONS_CAP_REF = "TABLE_DEFINITIONS"
TABLE_RESPONSE_FORMAT_CAP_REF = "TABLE_RESPONSE_FORMAT"
EXAMPLE_SELECT_CAP_REF = "EXAMPLE_SELECT"

SQL_DELIMITER = "----------"

import argparse

def main():
    # parse prompt param using arg parse
    parser = argparse.ArgumentParser()
    parser.add_argument("--prompt", help="Prompt for the AI")
    args = parser.parse_args()

    if not args.prompt:
        print('Please provide a prompt.')
        return

    # connect to db with statement and create a db_manager
    with PostgresDB() as db:
        db.connect_with_url(DB_URL)
        print('Prompt v1: ', args.prompt)

        # call db_manager.get_table_definitions_for_prompt() to get tables in prompt ready form
        table_definitions = db.get_table_definitions_for_prompt()

        # create two blank calls to llm.add_cap_ref() that update our current prompt passed in from cli
        prompt = llm.add_cap_ref(
            args.prompt, 
            f"Use these {POSTGRES_TABLE_DEFINITIONS_CAP_REF} to satisfy the database query.", 
            POSTGRES_TABLE_DEFINITIONS_CAP_REF, 
            table_definitions
        )

        config_list_gpt4 = ["gpt-4"]

        # build the gpt_configuration object
        gpt4_config = {
            "seed": 42,
            "temperature": 0,
            "config_list": config_list_gpt4,
            "seed": 120,
        }
        # build the function map

        # create our terminate msg function

        # create a set of agents
        admin = UserProxyAgent(
            name="Admin",
            system_message="Admin. Interact with the planner to discuss the plan. Plan execution needs to be approved by this admin.",
            code_execution_config=False,
        )
        engineer = AssistantAgent(
            name="Engineer",
            llm_config=gpt4_config,
            system_message='''Engineer. You follow an approved plan. You write python/shell code to solve tasks. Wrap the code in a code block that specifies the script type. The user can't modify your code. So do not suggest incomplete code which requires others to modify. Don't use a code block if it's not intended to be executed by the executor.
Don't include multiple code blocks in one response. Do not ask others to copy and paste the result. Check the execution result returned by the executor.
If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.
''',
        )
        analyst = AssistantAgent(
            name="Scientist",
            llm_config=gpt4_config,
            system_message="""Scientist. You follow an approved plan. You are able to categorize papers after seeing their abstracts printed. You don't write code."""
        )
        manager = AssistantAgent(
            name="Product Manager",
            llm_config=gpt4_config,
            system_message="Product Manager. I validate the response generated by the Senior Data Analyst to ensure it's correct and meets the user's requirements.",
        )

        # create a group chat and initiate the chat
        groupchat = GroupChat(
            agents=[admin, engineer],
            messages=[],
            max_round=50
        )

        manager = GroupChatManager(groupchat=groupchat, llm_config=gpt4_config)


if __name__ == '__main__':
    main()
