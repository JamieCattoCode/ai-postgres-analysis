from postgres_ai_agent.modules.db import PostgresDB
from postgres_ai_agent.modules import llm
import os
import dotenv
import autogen
from autogen import (
    AssistantAgent,
    UserProxyAgent,
    GroupChat,
    GroupChatManager,
    config_list_from_json,
    config_list_from_models,
)

dotenv.load_dotenv()

assert os.environ.get('DATABASE_URL'), "POSTGRES_CONNECTION_URL not found in .env file."
assert os.environ.get('OPEN_AI_API_KEY'), "OPEN_AI_API_KEY not found in .env file."

DB_URL = os.environ.get('DATABASE_URL')
OPEN_AI_API_KEY = os.environ.get('OPEN_AI_API_KEY')

POSTGRES_TABLE_DEFINITIONS_CAP_REF = "TABLE_DEFINITIONS"
TABLE_RESPONSE_FORMAT_CAP_REF = "TABLE_RESPONSE_FORMAT"
EXAMPLE_SELECT_CAP_REF = "EXAMPLE_SELECT"

SQL_DELIMITER = "----------"

import argparse

def main():
    # parse prompt param using arg parse
    parser = argparse.ArgumentParser()
    parser.add_argument("--prompt", help="Prompt for the AI")
    args = parser.parse_args()

    if not args.prompt:
        print('Please provide a prompt.')
        return

    # connect to db with statement and create a db_manager
    with PostgresDB() as db:
        db.connect_with_url(DB_URL)
        print('Prompt v1: ', args.prompt)

        # call db_manager.get_table_definitions_for_prompt() to get tables in prompt ready form
        table_definitions = db.get_table_definitions_for_prompt()

        # create two blank calls to llm.add_cap_ref() that update our current prompt passed in from cli
        prompt = llm.add_cap_ref(
            args.prompt, 
            f"Use these {POSTGRES_TABLE_DEFINITIONS_CAP_REF} to satisfy the database query.", 
            POSTGRES_TABLE_DEFINITIONS_CAP_REF, 
            table_definitions
        )

        config_list_gpt4 = ["gpt-4"]

        # build the gpt_configuration object
        gpt4_config = {
            "seed": 42,
            "temperature": 0,
            "config_list": config_list_gpt4,
            "config_list": autogen.config_list_from_models(config_list_gpt4),
            "use_cache": False,
            "functions": [
                {
                    "name": "run_sql",
                    "description": "Run an SQL query against the Postgres DB.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "sql": {
                                "type": "string",
                                "description": "The SQL query to run"
                            }
                        },
                        "required": ["sql"]
                    }
                }
            ]
        }
        # build the function map
        # PURPOSE: function map tells our agents about the functions they can run from external code
        function_map = {
            "run_sql": db.run_sql
        }

        # create our terminate msg function
        # PURPOSE: defines when the time is for our agents to stop execution
        def is_termination_msg(content):
            have_content = content.get("content", None) is not None
            if have_content and "APPROVED" in content["content"]:
                return True
            return False
        
        COMPLETION_PROMPT = "If everything looks good, respond with APPROVED."

        USER_PROXY_PROMPT = "Admin. Interact with the planner to discuss the plan. Plan execution needs to be approved by this admin." + COMPLETION_PROMPT
        DATA_ENGINEER_PROMPT = """Engineer. You follow an approved plan. You write python/shell code to solve tasks and you send it to the sr analyst for execution. 
        Wrap the code in a code block that specifies the script type. The user can't modify your code. 
        So do not suggest incomplete code which requires others to modify. 
        Don't use a code block if it's not intended to be executed by the executor. Don't include multiple code blocks in one response. 
        Do not ask others to copy and paste the result. Check the execution result returned by the executor. 
        If the result indicates there is an error, fix the error and output the code again. 
        Suggest the full code instead of partial code or code changes. 
        If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, 
        revisit your assumption, collect additional info you need, and think of a different approach to try""" + COMPLETION_PROMPT
        SR_DATA_ANALYST_PROMPT = "Data analyst. You follow an approved plan. Run the function using the arguments sent to you by the engineer, generate the response and send it to the product manager. If you have problems executing the code sent to you, be specific when you describe why you cannot run the code." + COMPLETION_PROMPT
        PRODUCT_MANAGER_PROMPT = "Product Manager. You validate the response generated by the Senior Data Analyst to ensure it's correct and meets the user's requirements. If it's incorrect, send it back to the engineer. Do not approve raw SQL queries, only the results they return." + COMPLETION_PROMPT

        # create a set of agents
        user_proxy = UserProxyAgent(
            name="Admin",
            system_message=USER_PROXY_PROMPT,
            code_execution_config=False,
            human_input_mode="NEVER",
            is_termination_msg=is_termination_msg,
        )

        engineer = AssistantAgent(
            name="Engineer",
            llm_config=gpt4_config,
            system_message=DATA_ENGINEER_PROMPT,
            code_execution_config=False,
            is_termination_msg=is_termination_msg,
            function_map=function_map,
        )

        sr_analyst = AssistantAgent(
            name="Senior_Analyst",
            llm_config=gpt4_config,
            system_message=SR_DATA_ANALYST_PROMPT,
            code_execution_config=False,
            is_termination_msg=is_termination_msg,
            function_map=function_map,
        )
        manager = AssistantAgent(
            name="Product_Manager",
            llm_config=gpt4_config,
            system_message=PRODUCT_MANAGER_PROMPT,
            code_execution_config=False,
            is_termination_msg=is_termination_msg,
        )

        # create a group chat and initiate the chat
        groupchat = GroupChat(
            agents=[user_proxy, engineer, sr_analyst, manager],
            messages=[],
            max_round=10
        )

        manager = GroupChatManager(groupchat=groupchat, llm_config=gpt4_config)

        user_proxy.initiate_chat(manager, clear_history=True, message=prompt)


if __name__ == '__main__':
    main()
